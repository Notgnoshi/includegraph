#!/usr/bin/env python3
"""Filter a TGF graph generated by includegraph.py.

There are two kinds of rules you can use to query the dependency graph.
1. (--filter) You can filter out specific subtrees that match a given glob
2. (--keep-only) You can filter out everything _except_ subtrees that match a given glob

These two options can be given multiple times. If both --keep-only and --filter globs are given, the
--filter globs are applied after the --keep-only globs.
"""
import argparse
import logging
import sys

LOG_LEVELS = {
    "CRITICAL": logging.CRITICAL,
    "ERROR": logging.ERROR,
    "WARNING": logging.WARNING,
    "INFO": logging.INFO,
    "DEBUG": logging.DEBUG,
}
DEFAULT_LEVEL = "INFO"


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--input",
        "-i",
        type=argparse.FileType("r"),
        default=sys.stdin,
        help="The path to the input graph. Defaults to stdin.",
    )
    parser.add_argument(
        "--output",
        "-o",
        type=argparse.FileType("w"),
        default=sys.stdout,
        help="The file to save the output to. Defaults to stdout.",
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default=DEFAULT_LEVEL,
        choices=LOG_LEVELS.keys(),
        help=f"Set the logging output level. Defaults to {DEFAULT_LEVEL}.",
    )
    parser.add_argument(
        "--shorten-file-paths",
        "-s",
        action="store_true",
        default=False,
        help="Shorten absolute node file paths",
    )
    parser.add_argument(
        "--filter-transitive-system-headers",
        action="store_true",
        default=False,
        help="Remove system headers included by another system header.",
    )
    parser.add_argument(
        "--filter-system-headers",
        action="store_true",
        default=False,
        help="Remove all system headers from the graph.",
    )
    parser.add_argument(
        "--filter",
        "-f",
        type=str,
        action="append",
        help="Remove subtrees where the root nodes match the given filepath glob(s). Applied after any --keep globs, if any are present.",
    )
    parser.add_argument(
        "--keep-only",
        "-k",
        type=str,
        action="append",
        help="Keep only subtrees where the root node matches the given filepath glob(s)",
    )
    return parser.parse_args()


def main(args):
    pass


if __name__ == "__main__":
    args = parse_args()
    logging.basicConfig(
        format="%(asctime)s - %(module)s - %(levelname)s - %(message)s",
        level=LOG_LEVELS.get(args.log_level),
        stream=sys.stderr,
    )
    main(args)
